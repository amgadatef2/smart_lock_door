
smart_door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00000faa  0000103e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080011e  0080011e  000010fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e64  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001117  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001925  00000000  00000000  00005473  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f4  00000000  00000000  00006d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3e  00000000  00000000  0000758c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d0e  00000000  00000000  000081ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00009ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_9>
  28:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_10>
  2c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 35       	cpi	r26, 0x57	; 87
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  8a:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Welcome_Message>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Welcome_Message(void){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	ae 97       	sbiw	r28, 0x2e	; 46
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	
uint8 Welcome[]="Hallo User";
  a6:	8b e0       	ldi	r24, 0x0B	; 11
  a8:	e5 ec       	ldi	r30, 0xC5	; 197
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <Welcome_Message+0x1e>
uint8 Lock_door_message[]="Lock door By";
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	e0 ed       	ldi	r30, 0xD0	; 208
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	de 01       	movw	r26, r28
  c0:	1c 96       	adiw	r26, 0x0c	; 12
  c2:	01 90       	ld	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	8a 95       	dec	r24
  c8:	e1 f7       	brne	.-8      	; 0xc2 <Welcome_Message+0x30>
uint8 My_Name[]="Amgad_Atef";
  ca:	8b e0       	ldi	r24, 0x0B	; 11
  cc:	ed ed       	ldi	r30, 0xDD	; 221
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	de 01       	movw	r26, r28
  d2:	59 96       	adiw	r26, 0x19	; 25
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <Welcome_Message+0x42>
uint8 attemps_Number[]="3 Attempts";
  dc:	8b e0       	ldi	r24, 0x0B	; 11
  de:	e8 ee       	ldi	r30, 0xE8	; 232
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	de 01       	movw	r26, r28
  e4:	94 96       	adiw	r26, 0x24	; 36
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <Welcome_Message+0x54>
LCD_WriteCustomCharacter();
  ee:	0e 94 14 04 	call	0x828	; 0x828 <LCD_WriteCustomCharacter>
LCD_GoTo(0,3);
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
LCD_WriteString(Welcome);
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	87 ea       	ldi	r24, 0xA7	; 167
 106:	91 e6       	ldi	r25, 0x61	; 97
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <Welcome_Message+0x76>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Welcome_Message+0x80>
 112:	00 00       	nop
	
	
	_delay_ms(2000);
	LCD_Clear();
 114:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
	LCD_GoTo(0,2);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(Lock_door_message);
 120:	ce 01       	movw	r24, r28
 122:	0c 96       	adiw	r24, 0x0c	; 12
 124:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	LCD_GoTo(1,3);
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(My_Name);
 130:	ce 01       	movw	r24, r28
 132:	49 96       	adiw	r24, 0x19	; 25
 134:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <Welcome_Message+0xac>
 146:	00 c0       	rjmp	.+0      	; 0x148 <Welcome_Message+0xb6>
 148:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 14a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
	LCD_GoTo(0,3);
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(attemps_Number);
 156:	ce 01       	movw	r24, r28
 158:	84 96       	adiw	r24, 0x24	; 36
 15a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	
	LCD_GoTo(1,5);
 15e:	65 e0       	ldi	r22, 0x05	; 5
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	
	LCD_WriteChar(0);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
	LCD_GoTo(1,7);
 16c:	67 e0       	ldi	r22, 0x07	; 7
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteChar(1);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	87 ea       	ldi	r24, 0xA7	; 167
 17e:	91 e6       	ldi	r25, 0x61	; 97
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <Welcome_Message+0xee>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Welcome_Message+0xf8>
 18a:	00 00       	nop
	_delay_ms(2000);
	
	LCD_Clear();
 18c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>

	LCD_GoTo(0,0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(Change_Pass);
 198:	86 e9       	ldi	r24, 0x96	; 150
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	LCD_GoTo(1,0);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(Enter_Pass);
 1a8:	88 e8       	ldi	r24, 0x88	; 136
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
}
 1b0:	ae 96       	adiw	r28, 0x2e	; 46
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <Lock_Door_Inti>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void Lock_Door_Inti(void){
	
	PORT_Init();
 1c2:	0e 94 9b 06 	call	0xd36	; 0xd36 <PORT_Init>
	LED_Init();
 1c6:	0e 94 41 04 	call	0x882	; 0x882 <LED_Init>
	LCD_Init();
 1ca:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_Init>
	IRQH_SetGlobalInterrupts(INTERRUPT_ENABLE);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 3b 05 	call	0xa76	; 0xa76 <IRQH_SetGlobalInterrupts>
	UART_Init();
 1d4:	0e 94 56 07 	call	0xeac	; 0xeac <UART_Init>
	ServoMotor_Init();
 1d8:	0e 94 4a 04 	call	0x894	; 0x894 <ServoMotor_Init>
	I2C_MasterInit();
 1dc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <I2C_MasterInit>
	IRQH_SetCallBack(Rechived_Char);
 1e0:	83 e7       	ldi	r24, 0x73	; 115
 1e2:	97 e0       	ldi	r25, 0x07	; 7
 1e4:	0e 94 47 05 	call	0xa8e	; 0xa8e <IRQH_SetCallBack>
	Welcome_Message();
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <Welcome_Message>
	ServoMotor_Home();
 1ec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <ServoMotor_Home>
 1f0:	08 95       	ret

000001f2 <Option_2>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Option_2(void){
 1f2:	cf 93       	push	r28
pointer=EEPROM_ReadMultipleBytes(addres_EEPROM,0x00);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e5       	ldi	r24, 0x50	; 80
 1f8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EEPROM_ReadMultipleBytes>
 1fc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 200:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 204:	8f e1       	ldi	r24, 0x1F	; 31
 206:	9e e4       	ldi	r25, 0x4E	; 78
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <Option_2+0x16>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Option_2+0x1c>
 20e:	00 00       	nop
_delay_ms(5);
	LCD_Clear();
 210:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
	LCD_WriteString(Enter_Pass);
 214:	88 e8       	ldi	r24, 0x88	; 136
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	
	VALUE=0;
 21c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <VALUE>
	LCD_GoTo(1,0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			Cnt2++;
			VALUE=0;
		}
		if (Cnt2==Size_Pass)
		{
			Arr_Pass_Full=1;
 228:	c1 e0       	ldi	r28, 0x01	; 1
	LCD_Clear();
	LCD_WriteString(Enter_Pass);
	
	VALUE=0;
	LCD_GoTo(1,0);
	while(Cnt2<Size_Pass)
 22a:	1e c0       	rjmp	.+60     	; 0x268 <Option_2+0x76>
	{
		VALUE= UART_RX_Char_Status();
 22c:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_RX_Char_Status>
 230:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <VALUE>
		if (VALUE==1)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 f4       	brne	.+36     	; 0x25c <Option_2+0x6a>
		{
			Arr[Cnt2]=RechivedChar;
 238:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Cnt2>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ee 5d       	subi	r30, 0xDE	; 222
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RechivedChar>
 246:	80 83       	st	Z, r24
			LCD_WriteChar('*');
 248:	8a e2       	ldi	r24, 0x2A	; 42
 24a:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
			Cnt2++;
 24e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Cnt2>
			VALUE=0;
 258:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <VALUE>
		}
		if (Cnt2==Size_Pass)
 25c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	11 f4       	brne	.+4      	; 0x268 <Option_2+0x76>
		{
			Arr_Pass_Full=1;
 264:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <Arr_Pass_Full>
	LCD_Clear();
	LCD_WriteString(Enter_Pass);
	
	VALUE=0;
	LCD_GoTo(1,0);
	while(Cnt2<Size_Pass)
 268:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	f0 f2       	brcs	.-68     	; 0x22c <Option_2+0x3a>
		{
			Arr_Pass_Full=1;
			
		}
	}
	Cnt2=0;
 270:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Cnt2>

}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <Wrong_pass>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Wrong_pass(void){
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	6e 97       	sbiw	r28, 0x1e	; 30
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
	uint8 wrong[]="Wrong Passward";
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	e3 ef       	ldi	r30, 0xF3	; 243
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	de 01       	movw	r26, r28
 296:	11 96       	adiw	r26, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <Wrong_pass+0x20>
	uint8 Get_out[]="Calling Police";
 2a0:	8f e0       	ldi	r24, 0x0F	; 15
 2a2:	e2 e0       	ldi	r30, 0x02	; 2
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	de 01       	movw	r26, r28
 2a8:	50 96       	adiw	r26, 0x10	; 16
 2aa:	01 90       	ld	r0, Z+
 2ac:	0d 92       	st	X+, r0
 2ae:	8a 95       	dec	r24
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <Wrong_pass+0x32>
	Attempts++;
 2b2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Attempts>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Attempts>
	if (Attempts < 3){
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	a0 f4       	brcc	.+40     	; 0x2e8 <Wrong_pass+0x70>
		LCD_Clear();
 2c0:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
		LCD_GoTo(0,1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
		LCD_WriteString(wrong);
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	87 ea       	ldi	r24, 0xA7	; 167
 2d8:	91 e6       	ldi	r25, 0x61	; 97
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <Wrong_pass+0x62>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <Wrong_pass+0x6c>
 2e4:	00 00       	nop
 2e6:	2a c0       	rjmp	.+84     	; 0x33c <Wrong_pass+0xc4>
		_delay_ms(2000);
	}
	else
	{
		uint8 i=0;
		LCD_Clear();
 2e8:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
		LCD_GoTo(0,3);
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
		LCD_WriteString(Get_out);
 2f4:	ce 01       	movw	r24, r28
 2f6:	40 96       	adiw	r24, 0x10	; 16
 2f8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	start_buzzer();
 2fc:	0e 94 a0 02 	call	0x540	; 0x540 <start_buzzer>
 300:	15 e0       	ldi	r17, 0x05	; 5
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	83 ed       	ldi	r24, 0xD3	; 211
 306:	90 e3       	ldi	r25, 0x30	; 48
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <Wrong_pass+0x90>
 310:	00 c0       	rjmp	.+0      	; 0x312 <Wrong_pass+0x9a>
 312:	00 00       	nop
	
		for (i=0;i<5;i++)
		{
			_delay_ms(1000);
			LED_TGL();
 314:	0e 94 45 04 	call	0x88a	; 0x88a <LED_TGL>
			LCD_Clear();
 318:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
			LCD_GoTo(0,3);
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			LCD_WriteString(Get_out);
 324:	ce 01       	movw	r24, r28
 326:	40 96       	adiw	r24, 0x10	; 16
 328:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
 32c:	11 50       	subi	r17, 0x01	; 1
		LCD_Clear();
		LCD_GoTo(0,3);
		LCD_WriteString(Get_out);
	start_buzzer();
	
		for (i=0;i<5;i++)
 32e:	49 f7       	brne	.-46     	; 0x302 <Wrong_pass+0x8a>
			LCD_GoTo(0,3);
			LCD_WriteString(Get_out);
			
		}
		
	stop_buzzer();
 330:	0e 94 a5 02 	call	0x54a	; 0x54a <stop_buzzer>
 LED_OFF();
 334:	0e 94 43 04 	call	0x886	; 0x886 <LED_OFF>
		Attempts =0;
 338:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Attempts>
	}
	LCD_Clear();
 33c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
	LCD_GoTo(0,0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(Change_Pass);
 348:	86 e9       	ldi	r24, 0x96	; 150
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	LCD_GoTo(1,0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	LCD_WriteString(Enter_Pass);
 358:	88 e8       	ldi	r24, 0x88	; 136
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
}
 360:	6e 96       	adiw	r28, 0x1e	; 30
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	08 95       	ret

00000374 <check_pass>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void check_pass(void){
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	2c 97       	sbiw	r28, 0x0c	; 12
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
		if ((Arr[0]==pointer[0])&&(Arr[1]==pointer[1])&&(Arr[2]==pointer[2])&&(Arr[3]==pointer[3]))
 388:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end>
 38c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x1>
 390:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <Arr>
 394:	80 81       	ld	r24, Z
 396:	98 13       	cpse	r25, r24
 398:	51 c0       	rjmp	.+162    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 39a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Arr+0x1>
 39e:	81 81       	ldd	r24, Z+1	; 0x01
 3a0:	98 13       	cpse	r25, r24
 3a2:	4c c0       	rjmp	.+152    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3a4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Arr+0x2>
 3a8:	82 81       	ldd	r24, Z+2	; 0x02
 3aa:	98 13       	cpse	r25, r24
 3ac:	47 c0       	rjmp	.+142    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Arr+0x3>
 3b2:	83 81       	ldd	r24, Z+3	; 0x03
 3b4:	98 13       	cpse	r25, r24
 3b6:	42 c0       	rjmp	.+132    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			uint8 Hallo_Owner[]="Hallo_Owner";
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	e1 e1       	ldi	r30, 0x11	; 17
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	de 01       	movw	r26, r28
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <check_pass+0x4e>
			ServoMotor_SetAngle18(90);
 3ca:	8a e5       	ldi	r24, 0x5A	; 90
 3cc:	0e 94 4d 04 	call	0x89a	; 0x89a <ServoMotor_SetAngle18>
			LCD_Clear();
 3d0:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
			LCD_GoTo(0,3);
 3d4:	63 e0       	ldi	r22, 0x03	; 3
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			LCD_WriteString(Hallo_Owner);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
			LCD_GoTo(1,8);
 3e4:	68 e0       	ldi	r22, 0x08	; 8
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			LCD_WriteChar(2);
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
			LCD_GoTo(1,9);
 3f2:	69 e0       	ldi	r22, 0x09	; 9
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			LCD_WriteChar(3);
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	87 ea       	ldi	r24, 0xA7	; 167
 404:	91 e6       	ldi	r25, 0x61	; 97
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
			_delay_ms(2000);
			ServoMotor_Home();
 412:	0e 94 54 04 	call	0x8a8	; 0x8a8 <ServoMotor_Home>
			Arr_Pass_Full=0;
 416:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <Arr_Pass_Full>
			LCD_Clear();
 41a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
			LCD_WriteString(Change_Pass);
 41e:	86 e9       	ldi	r24, 0x96	; 150
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
			LCD_GoTo(1,0);
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
			LCD_WriteString(Enter_Pass);
 42e:	88 e8       	ldi	r24, 0x88	; 136
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
			Attempts=0;
 436:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Attempts>
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void check_pass(void){
		if ((Arr[0]==pointer[0])&&(Arr[1]==pointer[1])&&(Arr[2]==pointer[2])&&(Arr[3]==pointer[3]))
		{
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			Attempts=0;
			
		}
		
		else{
			Wrong_pass();
 43c:	0e 94 3c 01 	call	0x278	; 0x278 <Wrong_pass>
		}
}
 440:	2c 96       	adiw	r28, 0x0c	; 12
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <Option_1>:
* \Parameters (in) : parameterName   Parameter Describtion
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Option_1(void){
 452:	cf 93       	push	r28
	VALUE= UART_RX_Char_Status();
 454:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_RX_Char_Status>
 458:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <VALUE>
	if(VALUE==1){
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <Option_1+0x10>
 460:	65 c0       	rjmp	.+202    	; 0x52c <Option_1+0xda>
if(RechivedChar=='1'){
 462:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RechivedChar>
 466:	81 33       	cpi	r24, 0x31	; 49
 468:	09 f0       	breq	.+2      	; 0x46c <Option_1+0x1a>
 46a:	56 c0       	rjmp	.+172    	; 0x518 <Option_1+0xc6>
	LCD_Clear();
 46c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
	LCD_WriteString(Change_Pass);
 470:	86 e9       	ldi	r24, 0x96	; 150
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
	LCD_GoTo(1,0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
	VALUE=0;
 480:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <VALUE>
	Cnt2=0;
 484:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Cnt2>
			LCD_WriteChar('*');
			Cnt2++;
			VALUE=0;
		}
		if(Cnt2==Size_Pass){
			Pass_Full=1;
 488:	c1 e0       	ldi	r28, 0x01	; 1
	LCD_Clear();
	LCD_WriteString(Change_Pass);
	LCD_GoTo(1,0);
	VALUE=0;
	Cnt2=0;
	while(Cnt2<Size_Pass){
 48a:	1e c0       	rjmp	.+60     	; 0x4c8 <Option_1+0x76>
		VALUE=UART_RX_Char_Status();
 48c:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_RX_Char_Status>
 490:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <VALUE>
		if (VALUE==1)
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	91 f4       	brne	.+36     	; 0x4bc <Option_1+0x6a>
		{
			RX_RecivedMultiBytes[Cnt2]=RechivedChar;
 498:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Cnt2>
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	e1 5c       	subi	r30, 0xC1	; 193
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <RechivedChar>
 4a6:	80 83       	st	Z, r24
			LCD_WriteChar('*');
 4a8:	8a e2       	ldi	r24, 0x2A	; 42
 4aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
			Cnt2++;
 4ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Cnt2>
			VALUE=0;
 4b8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <VALUE>
		}
		if(Cnt2==Size_Pass){
 4bc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 4c0:	84 30       	cpi	r24, 0x04	; 4
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <Option_1+0x76>
			Pass_Full=1;
 4c4:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <Pass_Full>
	LCD_Clear();
	LCD_WriteString(Change_Pass);
	LCD_GoTo(1,0);
	VALUE=0;
	Cnt2=0;
	while(Cnt2<Size_Pass){
 4c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Cnt2>
 4cc:	84 30       	cpi	r24, 0x04	; 4
 4ce:	f0 f2       	brcs	.-68     	; 0x48c <Option_1+0x3a>
			Pass_Full=1;
		}
		
		
	}
	Cnt2=0;
 4d0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Cnt2>

	if(Pass_Full==1){
 4d4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Pass_Full>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	41 f5       	brne	.+80     	; 0x52c <Option_1+0xda>
		EEPROM_writemultiplebytes(RX_RecivedMultiBytes,Size_Pass,addres_EEPROM,0x00);
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	40 e5       	ldi	r20, 0x50	; 80
 4e0:	64 e0       	ldi	r22, 0x04	; 4
 4e2:	8f e3       	ldi	r24, 0x3F	; 63
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 aa 02 	call	0x554	; 0x554 <EEPROM_writemultiplebytes>
 4ea:	8f e1       	ldi	r24, 0x1F	; 31
 4ec:	9e e4       	ldi	r25, 0x4E	; 78
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Option_1+0x9c>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Option_1+0xa2>
 4f4:	00 00       	nop
		_delay_ms(5);
		LCD_Clear();
 4f6:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_Clear>
		LCD_WriteString(Change_Pass);
 4fa:	86 e9       	ldi	r24, 0x96	; 150
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
		LCD_GoTo(1,0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_GoTo>
		LCD_WriteString(Enter_Pass);
 50a:	88 e8       	ldi	r24, 0x88	; 136
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_WriteString>
		Pass_Full=0;
 512:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <Pass_Full>
 516:	0a c0       	rjmp	.+20     	; 0x52c <Option_1+0xda>
	}
				
				
			}
			else if (RechivedChar=='2'){
 518:	82 33       	cpi	r24, 0x32	; 50
 51a:	41 f4       	brne	.+16     	; 0x52c <Option_1+0xda>
					
				Option_2();
 51c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Option_2>
				if (Arr_Pass_Full==1){
 520:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Arr_Pass_Full>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	11 f4       	brne	.+4      	; 0x52c <Option_1+0xda>
					
					check_pass();
 528:	0e 94 ba 01 	call	0x374	; 0x374 <check_pass>
				}
				
				
			}
	}
}
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <Start_application>:
* \Parameters (out): void
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Start_application(void){
	Option_1();
 530:	0e 94 29 02 	call	0x452	; 0x452 <Option_1>
 534:	08 95       	ret

00000536 <main>:


int main(void)
{

	Lock_Door_Inti();
 536:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Lock_Door_Inti>
	
	while(1)  {
		Start_application();
 53a:	0e 94 98 02 	call	0x530	; 0x530 <Start_application>
 53e:	fd cf       	rjmp	.-6      	; 0x53a <main+0x4>

00000540 <start_buzzer>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void start_buzzer(void){
	DIO_WriteChannel(PORTC_PIN5,PIN_HIGH);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	85 e1       	ldi	r24, 0x15	; 21
 544:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 548:	08 95       	ret

0000054a <stop_buzzer>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void stop_buzzer(void){
	DIO_WriteChannel(PORTC_PIN5,PIN_LOW);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	85 e1       	ldi	r24, 0x15	; 21
 54e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 552:	08 95       	ret

00000554 <EEPROM_writemultiplebytes>:
* \Parameters (in) : parameterName   Parameter Describtion                     
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void EEPROM_writemultiplebytes(uint8 *data,uint8 DATA_SIZE,uint8 addres,uint8 byte_loc){
 554:	ef 92       	push	r14
 556:	ff 92       	push	r15
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	7c 01       	movw	r14, r24
 562:	16 2f       	mov	r17, r22
 564:	d4 2f       	mov	r29, r20
 566:	c2 2f       	mov	r28, r18
	uint8 DATA_CNT=0;
	
	I2C_StartCondition();
 568:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(addres);
 56c:	8d 2f       	mov	r24, r29
 56e:	0e 94 06 05 	call	0xa0c	; 0xa0c <I2C_SlaveAddress_WriteOperation>
	
	I2C_WriteByte(byte_loc);
 572:	8c 2f       	mov	r24, r28
 574:	0e 94 1f 05 	call	0xa3e	; 0xa3e <I2C_WriteByte>
	while(DATA_CNT<DATA_SIZE){
 578:	11 23       	and	r17, r17
 57a:	71 f0       	breq	.+28     	; 0x598 <EEPROM_writemultiplebytes+0x44>
 57c:	e7 01       	movw	r28, r14
 57e:	11 50       	subi	r17, 0x01	; 1
 580:	01 2f       	mov	r16, r17
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	0f 5f       	subi	r16, 0xFF	; 255
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	0e 0d       	add	r16, r14
 58a:	1f 1d       	adc	r17, r15
		
		I2C_WriteByte(data[DATA_CNT]);
 58c:	89 91       	ld	r24, Y+
 58e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <I2C_WriteByte>
	
	I2C_StartCondition();
	I2C_SlaveAddress_WriteOperation(addres);
	
	I2C_WriteByte(byte_loc);
	while(DATA_CNT<DATA_SIZE){
 592:	c0 17       	cp	r28, r16
 594:	d1 07       	cpc	r29, r17
 596:	d1 f7       	brne	.-12     	; 0x58c <EEPROM_writemultiplebytes+0x38>
		I2C_WriteByte(data[DATA_CNT]);
		
		DATA_CNT++;
	}
	
	I2C_StopCondition();
 598:	0e 94 38 05 	call	0xa70	; 0xa70 <I2C_StopCondition>
	
	
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	08 95       	ret

000005aa <EEPROM_ReadMultipleBytes>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8* EEPROM_ReadMultipleBytes (uint8 EEPROM_Address , uint8 Byte_Address)
{
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	c8 2f       	mov	r28, r24
 5b4:	d6 2f       	mov	r29, r22
	uint8 Data_Cntr=0;
	static uint8 Data[RX_BUFFER_SIZE]={0};
	I2C_StartCondition();
 5b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
 5ba:	8c 2f       	mov	r24, r28
 5bc:	0e 94 06 05 	call	0xa0c	; 0xa0c <I2C_SlaveAddress_WriteOperation>
	I2C_WriteByte(Byte_Address);
 5c0:	8d 2f       	mov	r24, r29
 5c2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <I2C_WriteByte>
	I2C_RepeatedStart();
 5c6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <I2C_RepeatedStart>
	I2C_SlaveAddress_ReadOperation(EEPROM_Address);
 5ca:	8c 2f       	mov	r24, r28
 5cc:	0e 94 12 05 	call	0xa24	; 0xa24 <I2C_SlaveAddress_ReadOperation>
 5d0:	c9 e2       	ldi	r28, 0x29	; 41
 5d2:	d1 e0       	ldi	r29, 0x01	; 1
 5d4:	0d e2       	ldi	r16, 0x2D	; 45
 5d6:	11 e0       	ldi	r17, 0x01	; 1
	while (Data_Cntr < RX_BUFFER_SIZE)
	{
		Data[Data_Cntr]=I2C_ReadByte();
 5d8:	0e 94 2a 05 	call	0xa54	; 0xa54 <I2C_ReadByte>
 5dc:	89 93       	st	Y+, r24
	I2C_StartCondition();
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
	I2C_WriteByte(Byte_Address);
	I2C_RepeatedStart();
	I2C_SlaveAddress_ReadOperation(EEPROM_Address);
	while (Data_Cntr < RX_BUFFER_SIZE)
 5de:	c0 17       	cp	r28, r16
 5e0:	d1 07       	cpc	r29, r17
 5e2:	d1 f7       	brne	.-12     	; 0x5d8 <EEPROM_ReadMultipleBytes+0x2e>
	{
		Data[Data_Cntr]=I2C_ReadByte();
		Data_Cntr++;
	}
	I2C_StopCondition();
 5e4:	0e 94 38 05 	call	0xa70	; 0xa70 <I2C_StopCondition>
	return Data;
}
 5e8:	89 e2       	ldi	r24, 0x29	; 41
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <LCD_WriteCommand>:
			 LCD_WriteChar(((temp%10)+48));
			 temp /= 10;
		 }
	 }
	 _delay_ms(5);
}
 5f6:	cf 93       	push	r28
 5f8:	c8 2f       	mov	r28, r24
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 60a:	c4 fb       	bst	r28, 4
 60c:	66 27       	eor	r22, r22
 60e:	60 f9       	bld	r22, 0
 610:	83 e0       	ldi	r24, 0x03	; 3
 612:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 616:	c5 fb       	bst	r28, 5
 618:	66 27       	eor	r22, r22
 61a:	60 f9       	bld	r22, 0
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 622:	c6 fb       	bst	r28, 6
 624:	66 27       	eor	r22, r22
 626:	60 f9       	bld	r22, 0
 628:	85 e0       	ldi	r24, 0x05	; 5
 62a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 62e:	6c 2f       	mov	r22, r28
 630:	66 1f       	adc	r22, r22
 632:	66 27       	eor	r22, r22
 634:	66 1f       	adc	r22, r22
 636:	86 e0       	ldi	r24, 0x06	; 6
 638:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 644:	8f e9       	ldi	r24, 0x9F	; 159
 646:	9f e0       	ldi	r25, 0x0F	; 15
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <LCD_WriteCommand+0x52>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <LCD_WriteCommand+0x58>
 64e:	00 00       	nop
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 658:	6c 2f       	mov	r22, r28
 65a:	61 70       	andi	r22, 0x01	; 1
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 662:	c1 fb       	bst	r28, 1
 664:	66 27       	eor	r22, r22
 666:	60 f9       	bld	r22, 0
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 66e:	c2 fb       	bst	r28, 2
 670:	66 27       	eor	r22, r22
 672:	60 f9       	bld	r22, 0
 674:	85 e0       	ldi	r24, 0x05	; 5
 676:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 67a:	c3 fb       	bst	r28, 3
 67c:	66 27       	eor	r22, r22
 67e:	60 f9       	bld	r22, 0
 680:	86 e0       	ldi	r24, 0x06	; 6
 682:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 68e:	8f e9       	ldi	r24, 0x9F	; 159
 690:	9f e0       	ldi	r25, 0x0F	; 15
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <LCD_WriteCommand+0x9c>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_WriteCommand+0xa2>
 698:	00 00       	nop
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 6a2:	8f e1       	ldi	r24, 0x1F	; 31
 6a4:	9e e4       	ldi	r25, 0x4E	; 78
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <LCD_WriteCommand+0xb0>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <LCD_WriteCommand+0xb6>
 6ac:	00 00       	nop
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <LCD_Init>:
 6b2:	83 e3       	ldi	r24, 0x33	; 51
 6b4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6b8:	82 e3       	ldi	r24, 0x32	; 50
 6ba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6be:	88 e2       	ldi	r24, 0x28	; 40
 6c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6ca:	86 e0       	ldi	r24, 0x06	; 6
 6cc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6d0:	8c e0       	ldi	r24, 0x0C	; 12
 6d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 6dc:	8f e1       	ldi	r24, 0x1F	; 31
 6de:	9e e4       	ldi	r25, 0x4E	; 78
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_Init+0x2e>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_Init+0x34>
 6e6:	00 00       	nop
 6e8:	08 95       	ret

000006ea <LCD_WriteChar>:
 6ea:	cf 93       	push	r28
 6ec:	c8 2f       	mov	r28, r24
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 6fe:	c4 fb       	bst	r28, 4
 700:	66 27       	eor	r22, r22
 702:	60 f9       	bld	r22, 0
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 70a:	c5 fb       	bst	r28, 5
 70c:	66 27       	eor	r22, r22
 70e:	60 f9       	bld	r22, 0
 710:	84 e0       	ldi	r24, 0x04	; 4
 712:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 716:	c6 fb       	bst	r28, 6
 718:	66 27       	eor	r22, r22
 71a:	60 f9       	bld	r22, 0
 71c:	85 e0       	ldi	r24, 0x05	; 5
 71e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 722:	6c 2f       	mov	r22, r28
 724:	66 1f       	adc	r22, r22
 726:	66 27       	eor	r22, r22
 728:	66 1f       	adc	r22, r22
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 738:	8f e9       	ldi	r24, 0x9F	; 159
 73a:	9f e0       	ldi	r25, 0x0F	; 15
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_WriteChar+0x52>
 740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_WriteChar+0x58>
 742:	00 00       	nop
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 74c:	6c 2f       	mov	r22, r28
 74e:	61 70       	andi	r22, 0x01	; 1
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 756:	c1 fb       	bst	r28, 1
 758:	66 27       	eor	r22, r22
 75a:	60 f9       	bld	r22, 0
 75c:	84 e0       	ldi	r24, 0x04	; 4
 75e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 762:	c2 fb       	bst	r28, 2
 764:	66 27       	eor	r22, r22
 766:	60 f9       	bld	r22, 0
 768:	85 e0       	ldi	r24, 0x05	; 5
 76a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 76e:	c3 fb       	bst	r28, 3
 770:	66 27       	eor	r22, r22
 772:	60 f9       	bld	r22, 0
 774:	86 e0       	ldi	r24, 0x06	; 6
 776:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 782:	8f e9       	ldi	r24, 0x9F	; 159
 784:	9f e0       	ldi	r25, 0x0F	; 15
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <LCD_WriteChar+0x9c>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <LCD_WriteChar+0xa2>
 78c:	00 00       	nop
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	0e 94 59 04 	call	0x8b2	; 0x8b2 <DIO_WriteChannel>
 796:	8f e1       	ldi	r24, 0x1F	; 31
 798:	9e e4       	ldi	r25, 0x4E	; 78
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_WriteChar+0xb0>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_WriteChar+0xb6>
 7a0:	00 00       	nop
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <LCD_WriteString>:
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	fc 01       	movw	r30, r24
 7ae:	80 81       	ld	r24, Z
 7b0:	88 23       	and	r24, r24
 7b2:	59 f0       	breq	.+22     	; 0x7ca <LCD_WriteString+0x24>
 7b4:	8f 01       	movw	r16, r30
 7b6:	c0 e0       	ldi	r28, 0x00	; 0
 7b8:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
 7bc:	cf 5f       	subi	r28, 0xFF	; 255
 7be:	f8 01       	movw	r30, r16
 7c0:	ec 0f       	add	r30, r28
 7c2:	f1 1d       	adc	r31, r1
 7c4:	80 81       	ld	r24, Z
 7c6:	81 11       	cpse	r24, r1
 7c8:	f7 cf       	rjmp	.-18     	; 0x7b8 <LCD_WriteString+0x12>
 7ca:	8f e1       	ldi	r24, 0x1F	; 31
 7cc:	9e e4       	ldi	r25, 0x4E	; 78
 7ce:	01 97       	sbiw	r24, 0x01	; 1
 7d0:	f1 f7       	brne	.-4      	; 0x7ce <LCD_WriteString+0x28>
 7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <LCD_WriteString+0x2e>
 7d4:	00 00       	nop
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <LCD_GoTo+0x6>
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};	
 7e8:	90 e8       	ldi	r25, 0x80	; 128
 7ea:	99 83       	std	Y+1, r25	; 0x01
 7ec:	90 ec       	ldi	r25, 0xC0	; 192
 7ee:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
 7f0:	fe 01       	movw	r30, r28
 7f2:	e8 0f       	add	r30, r24
 7f4:	f1 1d       	adc	r31, r1
 7f6:	81 81       	ldd	r24, Z+1	; 0x01
 7f8:	86 0f       	add	r24, r22
 7fa:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 7fe:	8f e1       	ldi	r24, 0x1F	; 31
 800:	9e e4       	ldi	r25, 0x4E	; 78
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <LCD_GoTo+0x24>
 806:	00 c0       	rjmp	.+0      	; 0x808 <LCD_GoTo+0x2a>
 808:	00 00       	nop
	_delay_ms(5);
}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 81a:	8f e1       	ldi	r24, 0x1F	; 31
 81c:	9e e4       	ldi	r25, 0x4E	; 78
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <LCD_Clear+0xa>
 822:	00 c0       	rjmp	.+0      	; 0x824 <LCD_Clear+0x10>
 824:	00 00       	nop
 826:	08 95       	ret

00000828 <LCD_WriteCustomCharacter>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void LCD_WriteCustomCharacter (void)
{
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
 834:	80 e4       	ldi	r24, 0x40	; 64
 836:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_WriteCommand>
 83a:	c5 ea       	ldi	r28, 0xA5	; 165
 83c:	d0 e0       	ldi	r29, 0x00	; 0
 83e:	0f 2e       	mov	r0, r31
 840:	f5 ee       	ldi	r31, 0xE5	; 229
 842:	ef 2e       	mov	r14, r31
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	ff 2e       	mov	r15, r31
 848:	f0 2d       	mov	r31, r0
 84a:	0a c0       	rjmp	.+20     	; 0x860 <__stack+0x1>
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
	{
		for(Custom_Char_Col_Loc=0 ; Custom_Char_Col_Loc < 8 ; Custom_Char_Col_Loc++)
		{
			LCD_WriteChar(LCD_CUSTOM_CHARACTERS_g[Custom_Char_Row_Loc][Custom_Char_Col_Loc]);
 84c:	89 91       	ld	r24, Y+
 84e:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_WriteChar>
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
	{
		for(Custom_Char_Col_Loc=0 ; Custom_Char_Col_Loc < 8 ; Custom_Char_Col_Loc++)
 852:	c0 17       	cp	r28, r16
 854:	d1 07       	cpc	r29, r17
 856:	d1 f7       	brne	.-12     	; 0x84c <LCD_WriteCustomCharacter+0x24>
 858:	e8 01       	movw	r28, r16
void LCD_WriteCustomCharacter (void)
{
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
 85a:	e0 16       	cp	r14, r16
 85c:	f1 06       	cpc	r15, r17
 85e:	21 f0       	breq	.+8      	; 0x868 <__stack+0x9>
 860:	8e 01       	movw	r16, r28
 862:	08 5f       	subi	r16, 0xF8	; 248
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	f2 cf       	rjmp	.-28     	; 0x84c <LCD_WriteCustomCharacter+0x24>
 868:	8f e1       	ldi	r24, 0x1F	; 31
 86a:	9e e4       	ldi	r25, 0x4E	; 78
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
 870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
 872:	00 00       	nop
		{
			LCD_WriteChar(LCD_CUSTOM_CHARACTERS_g[Custom_Char_Row_Loc][Custom_Char_Col_Loc]);
		}
	}
	_delay_ms(5);
}
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	08 95       	ret

00000882 <LED_Init>:
	SET_BIT(DDRC,2);

}
void LED_ON (void)
{
	SET_BIT(PORTC,2);
 882:	a2 9a       	sbi	0x14, 2	; 20
 884:	08 95       	ret

00000886 <LED_OFF>:
}
void LED_OFF (void)
{
	CLR_BIT(PORTC,2);
 886:	aa 98       	cbi	0x15, 2	; 21
 888:	08 95       	ret

0000088a <LED_TGL>:

}
void LED_TGL (void)
{
	TGL_BIT(PORTC,2);
 88a:	95 b3       	in	r25, 0x15	; 21
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	89 27       	eor	r24, r25
 890:	85 bb       	out	0x15, r24	; 21
 892:	08 95       	ret

00000894 <ServoMotor_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void ServoMotor_Init (void)
{
	PWM_Init();
 894:	0e 94 1e 07 	call	0xe3c	; 0xe3c <PWM_Init>
 898:	08 95       	ret

0000089a <ServoMotor_SetAngle18>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void ServoMotor_SetAngle18 (uint8 Angle)
{
	switch (Angle)
 89a:	8a 35       	cpi	r24, 0x5A	; 90
 89c:	21 f4       	brne	.+8      	; 0x8a6 <ServoMotor_SetAngle18+0xc>
	{
		case 90:
		PWM1_Generate(50 , 10);
 89e:	6a e0       	ldi	r22, 0x0A	; 10
 8a0:	82 e3       	ldi	r24, 0x32	; 50
 8a2:	0e 94 28 07 	call	0xe50	; 0xe50 <PWM1_Generate>
 8a6:	08 95       	ret

000008a8 <ServoMotor_Home>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void ServoMotor_Home (void)
{
	PWM1_Generate(50 , 5);
 8a8:	65 e0       	ldi	r22, 0x05	; 5
 8aa:	82 e3       	ldi	r24, 0x32	; 50
 8ac:	0e 94 28 07 	call	0xe50	; 0xe50 <PWM1_Generate>
 8b0:	08 95       	ret

000008b2 <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
 8b2:	98 2f       	mov	r25, r24
 8b4:	96 95       	lsr	r25
 8b6:	96 95       	lsr	r25
 8b8:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
 8ba:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
 8bc:	66 23       	and	r22, r22
 8be:	09 f4       	brne	.+2      	; 0x8c2 <DIO_WriteChannel+0x10>
 8c0:	3f c0       	rjmp	.+126    	; 0x940 <DIO_WriteChannel+0x8e>
 8c2:	61 30       	cpi	r22, 0x01	; 1
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <DIO_WriteChannel+0x16>
 8c6:	7b c0       	rjmp	.+246    	; 0x9be <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH :
		switch(PORT)
 8c8:	91 30       	cpi	r25, 0x01	; 1
 8ca:	99 f0       	breq	.+38     	; 0x8f2 <DIO_WriteChannel+0x40>
 8cc:	28 f0       	brcs	.+10     	; 0x8d8 <DIO_WriteChannel+0x26>
 8ce:	92 30       	cpi	r25, 0x02	; 2
 8d0:	e9 f0       	breq	.+58     	; 0x90c <DIO_WriteChannel+0x5a>
 8d2:	93 30       	cpi	r25, 0x03	; 3
 8d4:	41 f1       	breq	.+80     	; 0x926 <DIO_WriteChannel+0x74>
 8d6:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
 8d8:	4b b3       	in	r20, 0x1b	; 27
 8da:	21 e0       	ldi	r18, 0x01	; 1
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	b9 01       	movw	r22, r18
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_WriteChannel+0x34>
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	8a 95       	dec	r24
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_WriteChannel+0x30>
 8ea:	cb 01       	movw	r24, r22
 8ec:	84 2b       	or	r24, r20
 8ee:	8b bb       	out	0x1b, r24	; 27
			break;
 8f0:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
 8f2:	48 b3       	in	r20, 0x18	; 24
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	b9 01       	movw	r22, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_WriteChannel+0x4e>
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	8a 95       	dec	r24
 902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_WriteChannel+0x4a>
 904:	cb 01       	movw	r24, r22
 906:	84 2b       	or	r24, r20
 908:	88 bb       	out	0x18, r24	; 24
			break;
 90a:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
 90c:	45 b3       	in	r20, 0x15	; 21
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	b9 01       	movw	r22, r18
 914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_WriteChannel+0x68>
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	8a 95       	dec	r24
 91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_WriteChannel+0x64>
 91e:	cb 01       	movw	r24, r22
 920:	84 2b       	or	r24, r20
 922:	85 bb       	out	0x15, r24	; 21
			break;
 924:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
 926:	42 b3       	in	r20, 0x12	; 18
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	b9 01       	movw	r22, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_WriteChannel+0x82>
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_WriteChannel+0x7e>
 938:	cb 01       	movw	r24, r22
 93a:	84 2b       	or	r24, r20
 93c:	82 bb       	out	0x12, r24	; 18
			break;
 93e:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
 940:	91 30       	cpi	r25, 0x01	; 1
 942:	a1 f0       	breq	.+40     	; 0x96c <DIO_WriteChannel+0xba>
 944:	28 f0       	brcs	.+10     	; 0x950 <DIO_WriteChannel+0x9e>
 946:	92 30       	cpi	r25, 0x02	; 2
 948:	f9 f0       	breq	.+62     	; 0x988 <DIO_WriteChannel+0xd6>
 94a:	93 30       	cpi	r25, 0x03	; 3
 94c:	59 f1       	breq	.+86     	; 0x9a4 <DIO_WriteChannel+0xf2>
 94e:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
 950:	4b b3       	in	r20, 0x1b	; 27
 952:	21 e0       	ldi	r18, 0x01	; 1
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	b9 01       	movw	r22, r18
 958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_WriteChannel+0xac>
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	8a 95       	dec	r24
 960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_WriteChannel+0xa8>
 962:	cb 01       	movw	r24, r22
 964:	80 95       	com	r24
 966:	84 23       	and	r24, r20
 968:	8b bb       	out	0x1b, r24	; 27
			break;
 96a:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
 96c:	48 b3       	in	r20, 0x18	; 24
 96e:	21 e0       	ldi	r18, 0x01	; 1
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	b9 01       	movw	r22, r18
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_WriteChannel+0xc8>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	8a 95       	dec	r24
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_WriteChannel+0xc4>
 97e:	cb 01       	movw	r24, r22
 980:	80 95       	com	r24
 982:	84 23       	and	r24, r20
 984:	88 bb       	out	0x18, r24	; 24
			break;
 986:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
 988:	45 b3       	in	r20, 0x15	; 21
 98a:	21 e0       	ldi	r18, 0x01	; 1
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	b9 01       	movw	r22, r18
 990:	02 c0       	rjmp	.+4      	; 0x996 <DIO_WriteChannel+0xe4>
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	8a 95       	dec	r24
 998:	e2 f7       	brpl	.-8      	; 0x992 <DIO_WriteChannel+0xe0>
 99a:	cb 01       	movw	r24, r22
 99c:	80 95       	com	r24
 99e:	84 23       	and	r24, r20
 9a0:	85 bb       	out	0x15, r24	; 21
			break;
 9a2:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
 9a4:	42 b3       	in	r20, 0x12	; 18
 9a6:	21 e0       	ldi	r18, 0x01	; 1
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	b9 01       	movw	r22, r18
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_WriteChannel+0x100>
 9ae:	66 0f       	add	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	8a 95       	dec	r24
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_WriteChannel+0xfc>
 9b6:	cb 01       	movw	r24, r22
 9b8:	80 95       	com	r24
 9ba:	84 23       	and	r24, r20
 9bc:	82 bb       	out	0x12, r24	; 18
 9be:	08 95       	ret

000009c0 <I2C_MasterInit>:
	// Set Address for the Slave
	TWAR = 0X02 << 1;
	//ENABLE ACK FOR Slave
	SET_BIT (TWCR,6);
	//ENABLE I2C
	SET_BIT (TWCR,2);
 9c0:	8c e0       	ldi	r24, 0x0C	; 12
 9c2:	80 b9       	out	0x00, r24	; 0
 9c4:	08 98       	cbi	0x01, 0	; 1
 9c6:	09 98       	cbi	0x01, 1	; 1
 9c8:	86 b7       	in	r24, 0x36	; 54
 9ca:	80 64       	ori	r24, 0x40	; 64
 9cc:	86 bf       	out	0x36, r24	; 54
 9ce:	86 b7       	in	r24, 0x36	; 54
 9d0:	84 60       	ori	r24, 0x04	; 4
 9d2:	86 bf       	out	0x36, r24	; 54
 9d4:	08 95       	ret

000009d6 <I2C_StartCondition>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_StartCondition(void)
{
	// GENERATE Start condition 
	SET_BIT(TWCR ,5);
 9d6:	86 b7       	in	r24, 0x36	; 54
 9d8:	80 62       	ori	r24, 0x20	; 32
 9da:	86 bf       	out	0x36, r24	; 54
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84; //                             <----
 9dc:	84 e8       	ldi	r24, 0x84	; 132
 9de:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG 
	while (GET_BIT(TWCR , 7)==0);
 9e0:	06 b6       	in	r0, 0x36	; 54
 9e2:	07 fe       	sbrs	r0, 7
 9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <I2C_StartCondition+0xa>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != START_COND);
 9e6:	81 b1       	in	r24, 0x01	; 1
 9e8:	88 7f       	andi	r24, 0xF8	; 248
 9ea:	88 30       	cpi	r24, 0x08	; 8
 9ec:	e1 f7       	brne	.-8      	; 0x9e6 <I2C_StartCondition+0x10>
}
 9ee:	08 95       	ret

000009f0 <I2C_RepeatedStart>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_RepeatedStart(void)
{
	// GENERATE Start condition
	SET_BIT(TWCR ,5);
 9f0:	86 b7       	in	r24, 0x36	; 54
 9f2:	80 62       	ori	r24, 0x20	; 32
 9f4:	86 bf       	out	0x36, r24	; 54
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR |= 0X84;   // ask why here there's | in here , and in start there's no |   <-----
 9f6:	86 b7       	in	r24, 0x36	; 54
 9f8:	84 68       	ori	r24, 0x84	; 132
 9fa:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
 9fc:	06 b6       	in	r0, 0x36	; 54
 9fe:	07 fe       	sbrs	r0, 7
 a00:	fd cf       	rjmp	.-6      	; 0x9fc <I2C_RepeatedStart+0xc>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != REP_START_COND);
 a02:	81 b1       	in	r24, 0x01	; 1
 a04:	88 7f       	andi	r24, 0xF8	; 248
 a06:	80 31       	cpi	r24, 0x10	; 16
 a08:	e1 f7       	brne	.-8      	; 0xa02 <I2C_RepeatedStart+0x12>
}
 a0a:	08 95       	ret

00000a0c <I2C_SlaveAddress_WriteOperation>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_SlaveAddress_WriteOperation(uint8 Address)
{
	//Send Slave Address with Write Operation
	TWDR = (Address << 1);
 a0c:	88 0f       	add	r24, r24
 a0e:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
 a10:	84 e8       	ldi	r24, 0x84	; 132
 a12:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
 a14:	06 b6       	in	r0, 0x36	; 54
 a16:	07 fe       	sbrs	r0, 7
 a18:	fd cf       	rjmp	.-6      	; 0xa14 <I2C_SlaveAddress_WriteOperation+0x8>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_SEND_SLAVE_ADD_AND_WR_OP_ACK_RECEIVED);
 a1a:	81 b1       	in	r24, 0x01	; 1
 a1c:	88 7f       	andi	r24, 0xF8	; 248
 a1e:	88 31       	cpi	r24, 0x18	; 24
 a20:	e1 f7       	brne	.-8      	; 0xa1a <I2C_SlaveAddress_WriteOperation+0xe>
}
 a22:	08 95       	ret

00000a24 <I2C_SlaveAddress_ReadOperation>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_SlaveAddress_ReadOperation(uint8 Address)
{
	//Send Slave Address with READ Operation
	TWDR = (Address << 1) | (0X01);
 a24:	88 0f       	add	r24, r24
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
 a2a:	84 e8       	ldi	r24, 0x84	; 132
 a2c:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
 a2e:	06 b6       	in	r0, 0x36	; 54
 a30:	07 fe       	sbrs	r0, 7
 a32:	fd cf       	rjmp	.-6      	; 0xa2e <I2C_SlaveAddress_ReadOperation+0xa>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_SEND_SLAVE_ADD_AND_RD_OP_ACK_RECEIVED);
 a34:	81 b1       	in	r24, 0x01	; 1
 a36:	88 7f       	andi	r24, 0xF8	; 248
 a38:	80 34       	cpi	r24, 0x40	; 64
 a3a:	e1 f7       	brne	.-8      	; 0xa34 <I2C_SlaveAddress_ReadOperation+0x10>
}
 a3c:	08 95       	ret

00000a3e <I2C_WriteByte>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_WriteByte(uint8 Data)
{
	// Send Byte of Data
	TWDR = Data;
 a3e:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
 a40:	84 e8       	ldi	r24, 0x84	; 132
 a42:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
 a44:	06 b6       	in	r0, 0x36	; 54
 a46:	07 fe       	sbrs	r0, 7
 a48:	fd cf       	rjmp	.-6      	; 0xa44 <I2C_WriteByte+0x6>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_WR_BYTE_ACK_RECEIVED);
 a4a:	81 b1       	in	r24, 0x01	; 1
 a4c:	88 7f       	andi	r24, 0xF8	; 248
 a4e:	88 32       	cpi	r24, 0x28	; 40
 a50:	e1 f7       	brne	.-8      	; 0xa4a <I2C_WriteByte+0xc>
}
 a52:	08 95       	ret

00000a54 <I2C_ReadByte>:
uint8 I2C_ReadByte(void)
{
	uint8 Data=0;
	
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
 a54:	84 e8       	ldi	r24, 0x84	; 132
 a56:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,6);
 a58:	86 b7       	in	r24, 0x36	; 54
 a5a:	80 64       	ori	r24, 0x40	; 64
 a5c:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
 a5e:	06 b6       	in	r0, 0x36	; 54
 a60:	07 fe       	sbrs	r0, 7
 a62:	fd cf       	rjmp	.-6      	; 0xa5e <I2C_ReadByte+0xa>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_RD_BYTE_WITH_ACK_SENT);
 a64:	81 b1       	in	r24, 0x01	; 1
 a66:	88 7f       	andi	r24, 0xF8	; 248
 a68:	80 35       	cpi	r24, 0x50	; 80
 a6a:	e1 f7       	brne	.-8      	; 0xa64 <I2C_ReadByte+0x10>
	
	//Load the Data on the Register
	Data = TWDR;
 a6c:	83 b1       	in	r24, 0x03	; 3
	return Data;
}
 a6e:	08 95       	ret

00000a70 <I2C_StopCondition>:
*******************************************************************************/
void I2C_StopCondition(void)
{
	//Stop Condition
	//TRIGGER THE FLAG
	TWCR = 0X94;
 a70:	84 e9       	ldi	r24, 0x94	; 148
 a72:	86 bf       	out	0x36, r24	; 54
 a74:	08 95       	ret

00000a76 <IRQH_SetGlobalInterrupts>:
	   #elif (EXT_INT0_TRIGGER == LOW_LEVEL_TRIGGER)
	     CLR_BIT (MCUCR , 0);
	     CLR_BIT (MCUCR , 1);
	   #elif (EXT_INT0_TRIGGER == ANY_LOGICAL_CHANGE_TRIGGER)
	     SET_BIT (MCUCR , 0);
	     CLR_BIT (MCUCR , 1);
 a76:	88 23       	and	r24, r24
 a78:	31 f0       	breq	.+12     	; 0xa86 <IRQH_SetGlobalInterrupts+0x10>
 a7a:	81 30       	cpi	r24, 0x01	; 1
 a7c:	39 f4       	brne	.+14     	; 0xa8c <IRQH_SetGlobalInterrupts+0x16>
 a7e:	8f b7       	in	r24, 0x3f	; 63
 a80:	80 68       	ori	r24, 0x80	; 128
 a82:	8f bf       	out	0x3f, r24	; 63
 a84:	08 95       	ret
 a86:	8f b7       	in	r24, 0x3f	; 63
 a88:	8f 77       	andi	r24, 0x7F	; 127
 a8a:	8f bf       	out	0x3f, r24	; 63
 a8c:	08 95       	ret

00000a8e <IRQH_SetCallBack>:
*                                    E_NOT_OK
*******************************************************************************/

void IRQH_SetCallBack (void(*p)(void))
{
	RX_ptr = p;
 a8e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <RX_ptr+0x1>
 a92:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <RX_ptr>
 a96:	08 95       	ret

00000a98 <__vector_1>:
						  {
							  ADC_Vin_Value_mv = ((ADC_INPUT_16BIT_ACCESS* 5000) / 1024);
						  }
*/
ISR(INT0_vect)
{
 a98:	1f 92       	push	r1
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	0f 92       	push	r0
 aa0:	11 24       	eor	r1, r1
 aa2:	2f 93       	push	r18
 aa4:	3f 93       	push	r19
 aa6:	4f 93       	push	r20
 aa8:	5f 93       	push	r21
 aaa:	6f 93       	push	r22
 aac:	7f 93       	push	r23
 aae:	8f 93       	push	r24
 ab0:	9f 93       	push	r25
 ab2:	af 93       	push	r26
 ab4:	bf 93       	push	r27
 ab6:	ef 93       	push	r30
 ab8:	ff 93       	push	r31
	(*ptr)();
 aba:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <ptr>
 abe:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <ptr+0x1>
 ac2:	09 95       	icall
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 ae6:	1f 92       	push	r1
 ae8:	0f 92       	push	r0
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	0f 92       	push	r0
 aee:	11 24       	eor	r1, r1
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	ef 93       	push	r30
 b06:	ff 93       	push	r31
	static uint32 TIMER0_OVF_CNTR =0;
	TIMER0_OVF_CNTR++;
 b08:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <TIMER0_OVF_CNTR.1673>
 b0c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <TIMER0_OVF_CNTR.1673+0x1>
 b10:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <TIMER0_OVF_CNTR.1673+0x2>
 b14:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <TIMER0_OVF_CNTR.1673+0x3>
 b18:	01 96       	adiw	r24, 0x01	; 1
 b1a:	a1 1d       	adc	r26, r1
 b1c:	b1 1d       	adc	r27, r1
 b1e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <TIMER0_OVF_CNTR.1673>
 b22:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <TIMER0_OVF_CNTR.1673+0x1>
 b26:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <TIMER0_OVF_CNTR.1673+0x2>
 b2a:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <TIMER0_OVF_CNTR.1673+0x3>
	if(TIMER0_OVF_CNTR == TIMER0Number_OVF_Flags_g)
 b2e:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <TIMER0Number_OVF_Flags_g>
 b32:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <TIMER0Number_OVF_Flags_g+0x1>
 b36:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <TIMER0Number_OVF_Flags_g+0x2>
 b3a:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <TIMER0Number_OVF_Flags_g+0x3>
 b3e:	84 17       	cp	r24, r20
 b40:	95 07       	cpc	r25, r21
 b42:	a6 07       	cpc	r26, r22
 b44:	b7 07       	cpc	r27, r23
 b46:	81 f4       	brne	.+32     	; 0xb68 <__vector_11+0x82>
	{
		(*GPT_ptr)();
 b48:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <GPT_ptr>
 b4c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <GPT_ptr+0x1>
 b50:	09 95       	icall
		TIMER0_OVF_CNTR=0;
 b52:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <TIMER0_OVF_CNTR.1673>
 b56:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <TIMER0_OVF_CNTR.1673+0x1>
 b5a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <TIMER0_OVF_CNTR.1673+0x2>
 b5e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <TIMER0_OVF_CNTR.1673+0x3>
		TCNT0 = TIMER0Init_Value_g;
 b62:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <TIMER0Init_Value_g>
 b66:	82 bf       	out	0x32, r24	; 50
	}
}
 b68:	ff 91       	pop	r31
 b6a:	ef 91       	pop	r30
 b6c:	bf 91       	pop	r27
 b6e:	af 91       	pop	r26
 b70:	9f 91       	pop	r25
 b72:	8f 91       	pop	r24
 b74:	7f 91       	pop	r23
 b76:	6f 91       	pop	r22
 b78:	5f 91       	pop	r21
 b7a:	4f 91       	pop	r20
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
	static uint32 TIMER0_CmprMatch_CNTR =0;
	TIMER0_CmprMatch_CNTR++;
 bac:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <TIMER0_CmprMatch_CNTR.1679>
 bb0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <TIMER0_CmprMatch_CNTR.1679+0x1>
 bb4:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <TIMER0_CmprMatch_CNTR.1679+0x2>
 bb8:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <TIMER0_CmprMatch_CNTR.1679+0x3>
 bbc:	01 96       	adiw	r24, 0x01	; 1
 bbe:	a1 1d       	adc	r26, r1
 bc0:	b1 1d       	adc	r27, r1
 bc2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <TIMER0_CmprMatch_CNTR.1679>
 bc6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <TIMER0_CmprMatch_CNTR.1679+0x1>
 bca:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <TIMER0_CmprMatch_CNTR.1679+0x2>
 bce:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <TIMER0_CmprMatch_CNTR.1679+0x3>
	if (TIMER0_CmprMatch_CNTR == TIMER0Number_CmprMatch_Flags_g)
 bd2:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <TIMER0Number_CmprMatch_Flags_g>
 bd6:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <TIMER0Number_CmprMatch_Flags_g+0x1>
 bda:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <TIMER0Number_CmprMatch_Flags_g+0x2>
 bde:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <TIMER0Number_CmprMatch_Flags_g+0x3>
 be2:	84 17       	cp	r24, r20
 be4:	95 07       	cpc	r25, r21
 be6:	a6 07       	cpc	r26, r22
 be8:	b7 07       	cpc	r27, r23
 bea:	69 f4       	brne	.+26     	; 0xc06 <__vector_10+0x7c>
	{
		(*GPT_ptr)();
 bec:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <GPT_ptr>
 bf0:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <GPT_ptr+0x1>
 bf4:	09 95       	icall
		TIMER0_CmprMatch_CNTR=0;
 bf6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <TIMER0_CmprMatch_CNTR.1679>
 bfa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <TIMER0_CmprMatch_CNTR.1679+0x1>
 bfe:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <TIMER0_CmprMatch_CNTR.1679+0x2>
 c02:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <TIMER0_CmprMatch_CNTR.1679+0x3>
	}
}
 c06:	ff 91       	pop	r31
 c08:	ef 91       	pop	r30
 c0a:	bf 91       	pop	r27
 c0c:	af 91       	pop	r26
 c0e:	9f 91       	pop	r25
 c10:	8f 91       	pop	r24
 c12:	7f 91       	pop	r23
 c14:	6f 91       	pop	r22
 c16:	5f 91       	pop	r21
 c18:	4f 91       	pop	r20
 c1a:	3f 91       	pop	r19
 c1c:	2f 91       	pop	r18
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

00000c28 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 c28:	1f 92       	push	r1
 c2a:	0f 92       	push	r0
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	0f 92       	push	r0
 c30:	11 24       	eor	r1, r1
 c32:	8f 93       	push	r24
 c34:	9f 93       	push	r25
 c36:	af 93       	push	r26
 c38:	bf 93       	push	r27
	//(*GPT_ptr)();
	//TCNT1_16BIT_ACCESS = TIMER1Init_Value_g;    These two lines for Timer1 Normal Mode 
	TIMER1Number_OVF_Flags_g++;  // This line For ICU Usage with Ultrasonic Sensor 
 c3a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TIMER1Number_OVF_Flags_g>
 c3e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <TIMER1Number_OVF_Flags_g+0x1>
 c42:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <TIMER1Number_OVF_Flags_g+0x2>
 c46:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <TIMER1Number_OVF_Flags_g+0x3>
 c4a:	01 96       	adiw	r24, 0x01	; 1
 c4c:	a1 1d       	adc	r26, r1
 c4e:	b1 1d       	adc	r27, r1
 c50:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <TIMER1Number_OVF_Flags_g>
 c54:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <TIMER1Number_OVF_Flags_g+0x1>
 c58:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <TIMER1Number_OVF_Flags_g+0x2>
 c5c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <TIMER1Number_OVF_Flags_g+0x3>
}
 c60:	bf 91       	pop	r27
 c62:	af 91       	pop	r26
 c64:	9f 91       	pop	r25
 c66:	8f 91       	pop	r24
 c68:	0f 90       	pop	r0
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	0f 90       	pop	r0
 c6e:	1f 90       	pop	r1
 c70:	18 95       	reti

00000c72 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 c72:	1f 92       	push	r1
 c74:	0f 92       	push	r0
 c76:	0f b6       	in	r0, 0x3f	; 63
 c78:	0f 92       	push	r0
 c7a:	11 24       	eor	r1, r1
 c7c:	2f 93       	push	r18
 c7e:	3f 93       	push	r19
 c80:	4f 93       	push	r20
 c82:	5f 93       	push	r21
 c84:	6f 93       	push	r22
 c86:	7f 93       	push	r23
 c88:	8f 93       	push	r24
 c8a:	9f 93       	push	r25
 c8c:	af 93       	push	r26
 c8e:	bf 93       	push	r27
 c90:	ef 93       	push	r30
 c92:	ff 93       	push	r31
	(*GPT_ptr)();
 c94:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <GPT_ptr>
 c98:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <GPT_ptr+0x1>
 c9c:	09 95       	icall
}
 c9e:	ff 91       	pop	r31
 ca0:	ef 91       	pop	r30
 ca2:	bf 91       	pop	r27
 ca4:	af 91       	pop	r26
 ca6:	9f 91       	pop	r25
 ca8:	8f 91       	pop	r24
 caa:	7f 91       	pop	r23
 cac:	6f 91       	pop	r22
 cae:	5f 91       	pop	r21
 cb0:	4f 91       	pop	r20
 cb2:	3f 91       	pop	r19
 cb4:	2f 91       	pop	r18
 cb6:	0f 90       	pop	r0
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	0f 90       	pop	r0
 cbc:	1f 90       	pop	r1
 cbe:	18 95       	reti

00000cc0 <__vector_15>:



ISR (USART_TXC_vect)
{
 cc0:	1f 92       	push	r1
 cc2:	0f 92       	push	r0
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	0f 92       	push	r0
 cc8:	11 24       	eor	r1, r1
 cca:	8f 93       	push	r24
	TX_CNTR++;
 ccc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TX_CNTR>
 cd0:	8f 5f       	subi	r24, 0xFF	; 255
 cd2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TX_CNTR>
	TX_STATUS_FLAG =1;
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <TX_STATUS_FLAG>
}
 cdc:	8f 91       	pop	r24
 cde:	0f 90       	pop	r0
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	0f 90       	pop	r0
 ce4:	1f 90       	pop	r1
 ce6:	18 95       	reti

00000ce8 <__vector_13>:

ISR (USART_RXC_vect)
{
 ce8:	1f 92       	push	r1
 cea:	0f 92       	push	r0
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	0f 92       	push	r0
 cf0:	11 24       	eor	r1, r1
 cf2:	2f 93       	push	r18
 cf4:	3f 93       	push	r19
 cf6:	4f 93       	push	r20
 cf8:	5f 93       	push	r21
 cfa:	6f 93       	push	r22
 cfc:	7f 93       	push	r23
 cfe:	8f 93       	push	r24
 d00:	9f 93       	push	r25
 d02:	af 93       	push	r26
 d04:	bf 93       	push	r27
 d06:	ef 93       	push	r30
 d08:	ff 93       	push	r31
	(*RX_ptr)();
 d0a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <RX_ptr>
 d0e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <RX_ptr+0x1>
 d12:	09 95       	icall
}
 d14:	ff 91       	pop	r31
 d16:	ef 91       	pop	r30
 d18:	bf 91       	pop	r27
 d1a:	af 91       	pop	r26
 d1c:	9f 91       	pop	r25
 d1e:	8f 91       	pop	r24
 d20:	7f 91       	pop	r23
 d22:	6f 91       	pop	r22
 d24:	5f 91       	pop	r21
 d26:	4f 91       	pop	r20
 d28:	3f 91       	pop	r19
 d2a:	2f 91       	pop	r18
 d2c:	0f 90       	pop	r0
 d2e:	0f be       	out	0x3f, r0	; 63
 d30:	0f 90       	pop	r0
 d32:	1f 90       	pop	r1
 d34:	18 95       	reti

00000d36 <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
 d36:	e0 e6       	ldi	r30, 0x60	; 96
 d38:	f0 e0       	ldi	r31, 0x00	; 0
 d3a:	48 e8       	ldi	r20, 0x88	; 136
 d3c:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 d3e:	61 e0       	ldi	r22, 0x01	; 1
 d40:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
 d42:	80 81       	ld	r24, Z
 d44:	98 2f       	mov	r25, r24
 d46:	96 95       	lsr	r25
 d48:	96 95       	lsr	r25
 d4a:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
 d4c:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
 d4e:	21 81       	ldd	r18, Z+1	; 0x01
 d50:	22 23       	and	r18, r18
 d52:	19 f0       	breq	.+6      	; 0xd5a <PORT_Init+0x24>
 d54:	21 30       	cpi	r18, 0x01	; 1
 d56:	c9 f1       	breq	.+114    	; 0xdca <PORT_Init+0x94>
 d58:	6b c0       	rjmp	.+214    	; 0xe30 <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
 d5a:	91 30       	cpi	r25, 0x01	; 1
 d5c:	91 f0       	breq	.+36     	; 0xd82 <PORT_Init+0x4c>
 d5e:	28 f0       	brcs	.+10     	; 0xd6a <PORT_Init+0x34>
 d60:	92 30       	cpi	r25, 0x02	; 2
 d62:	d9 f0       	breq	.+54     	; 0xd9a <PORT_Init+0x64>
 d64:	93 30       	cpi	r25, 0x03	; 3
 d66:	29 f1       	breq	.+74     	; 0xdb2 <PORT_Init+0x7c>
 d68:	63 c0       	rjmp	.+198    	; 0xe30 <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
 d6a:	9a b3       	in	r25, 0x1a	; 26
 d6c:	9b 01       	movw	r18, r22
 d6e:	02 c0       	rjmp	.+4      	; 0xd74 <PORT_Init+0x3e>
 d70:	22 0f       	add	r18, r18
 d72:	33 1f       	adc	r19, r19
 d74:	8a 95       	dec	r24
 d76:	e2 f7       	brpl	.-8      	; 0xd70 <PORT_Init+0x3a>
 d78:	82 2f       	mov	r24, r18
 d7a:	80 95       	com	r24
 d7c:	89 23       	and	r24, r25
 d7e:	8a bb       	out	0x1a, r24	; 26
					break;
 d80:	57 c0       	rjmp	.+174    	; 0xe30 <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
 d82:	97 b3       	in	r25, 0x17	; 23
 d84:	9b 01       	movw	r18, r22
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <PORT_Init+0x56>
 d88:	22 0f       	add	r18, r18
 d8a:	33 1f       	adc	r19, r19
 d8c:	8a 95       	dec	r24
 d8e:	e2 f7       	brpl	.-8      	; 0xd88 <PORT_Init+0x52>
 d90:	82 2f       	mov	r24, r18
 d92:	80 95       	com	r24
 d94:	89 23       	and	r24, r25
 d96:	87 bb       	out	0x17, r24	; 23
					break;
 d98:	4b c0       	rjmp	.+150    	; 0xe30 <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
 d9a:	94 b3       	in	r25, 0x14	; 20
 d9c:	9b 01       	movw	r18, r22
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <PORT_Init+0x6e>
 da0:	22 0f       	add	r18, r18
 da2:	33 1f       	adc	r19, r19
 da4:	8a 95       	dec	r24
 da6:	e2 f7       	brpl	.-8      	; 0xda0 <PORT_Init+0x6a>
 da8:	82 2f       	mov	r24, r18
 daa:	80 95       	com	r24
 dac:	89 23       	and	r24, r25
 dae:	84 bb       	out	0x14, r24	; 20
					break;
 db0:	3f c0       	rjmp	.+126    	; 0xe30 <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
 db2:	91 b3       	in	r25, 0x11	; 17
 db4:	9b 01       	movw	r18, r22
 db6:	02 c0       	rjmp	.+4      	; 0xdbc <PORT_Init+0x86>
 db8:	22 0f       	add	r18, r18
 dba:	33 1f       	adc	r19, r19
 dbc:	8a 95       	dec	r24
 dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <PORT_Init+0x82>
 dc0:	82 2f       	mov	r24, r18
 dc2:	80 95       	com	r24
 dc4:	89 23       	and	r24, r25
 dc6:	81 bb       	out	0x11, r24	; 17
					break;
 dc8:	33 c0       	rjmp	.+102    	; 0xe30 <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
 dca:	91 30       	cpi	r25, 0x01	; 1
 dcc:	89 f0       	breq	.+34     	; 0xdf0 <PORT_Init+0xba>
 dce:	28 f0       	brcs	.+10     	; 0xdda <PORT_Init+0xa4>
 dd0:	92 30       	cpi	r25, 0x02	; 2
 dd2:	c9 f0       	breq	.+50     	; 0xe06 <PORT_Init+0xd0>
 dd4:	93 30       	cpi	r25, 0x03	; 3
 dd6:	11 f1       	breq	.+68     	; 0xe1c <PORT_Init+0xe6>
 dd8:	2b c0       	rjmp	.+86     	; 0xe30 <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
 dda:	2a b3       	in	r18, 0x1a	; 26
 ddc:	db 01       	movw	r26, r22
 dde:	02 c0       	rjmp	.+4      	; 0xde4 <PORT_Init+0xae>
 de0:	aa 0f       	add	r26, r26
 de2:	bb 1f       	adc	r27, r27
 de4:	8a 95       	dec	r24
 de6:	e2 f7       	brpl	.-8      	; 0xde0 <PORT_Init+0xaa>
 de8:	cd 01       	movw	r24, r26
 dea:	82 2b       	or	r24, r18
 dec:	8a bb       	out	0x1a, r24	; 26
				    break;
 dee:	20 c0       	rjmp	.+64     	; 0xe30 <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
 df0:	27 b3       	in	r18, 0x17	; 23
 df2:	db 01       	movw	r26, r22
 df4:	02 c0       	rjmp	.+4      	; 0xdfa <PORT_Init+0xc4>
 df6:	aa 0f       	add	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	8a 95       	dec	r24
 dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <PORT_Init+0xc0>
 dfe:	cd 01       	movw	r24, r26
 e00:	82 2b       	or	r24, r18
 e02:	87 bb       	out	0x17, r24	; 23
				    break;
 e04:	15 c0       	rjmp	.+42     	; 0xe30 <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
 e06:	24 b3       	in	r18, 0x14	; 20
 e08:	db 01       	movw	r26, r22
 e0a:	02 c0       	rjmp	.+4      	; 0xe10 <PORT_Init+0xda>
 e0c:	aa 0f       	add	r26, r26
 e0e:	bb 1f       	adc	r27, r27
 e10:	8a 95       	dec	r24
 e12:	e2 f7       	brpl	.-8      	; 0xe0c <PORT_Init+0xd6>
 e14:	cd 01       	movw	r24, r26
 e16:	82 2b       	or	r24, r18
 e18:	84 bb       	out	0x14, r24	; 20
				    break;
 e1a:	0a c0       	rjmp	.+20     	; 0xe30 <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
 e1c:	21 b3       	in	r18, 0x11	; 17
 e1e:	db 01       	movw	r26, r22
 e20:	02 c0       	rjmp	.+4      	; 0xe26 <PORT_Init+0xf0>
 e22:	aa 0f       	add	r26, r26
 e24:	bb 1f       	adc	r27, r27
 e26:	8a 95       	dec	r24
 e28:	e2 f7       	brpl	.-8      	; 0xe22 <PORT_Init+0xec>
 e2a:	cd 01       	movw	r24, r26
 e2c:	82 2b       	or	r24, r18
 e2e:	81 bb       	out	0x11, r24	; 17
 e30:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
 e32:	e4 17       	cp	r30, r20
 e34:	f5 07       	cpc	r31, r21
 e36:	09 f0       	breq	.+2      	; 0xe3a <PORT_Init+0x104>
 e38:	84 cf       	rjmp	.-248    	; 0xd42 <PORT_Init+0xc>
			
			default:
			break;
		}
	}
 e3a:	08 95       	ret

00000e3c <PWM_Init>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void PWM0_Generate (uint8 Duty_Cycle)
{
 e3c:	8f b5       	in	r24, 0x2f	; 47
 e3e:	82 60       	ori	r24, 0x02	; 2
 e40:	8f bd       	out	0x2f, r24	; 47
 e42:	8e b5       	in	r24, 0x2e	; 46
 e44:	88 61       	ori	r24, 0x18	; 24
 e46:	8e bd       	out	0x2e, r24	; 46
 e48:	8f b5       	in	r24, 0x2f	; 47
 e4a:	80 68       	ori	r24, 0x80	; 128
 e4c:	8f bd       	out	0x2f, r24	; 47
 e4e:	08 95       	ret

00000e50 <PWM1_Generate>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void PWM1_Generate (uint8 Frequency , uint8 Duty_Cycle)
{
 e50:	cf 93       	push	r28
 e52:	c6 2f       	mov	r28, r22
	ICR1_16BIT_ACCESS = ((16000000 / (Frequency * PWM1_PRESC))-1);
 e54:	28 2f       	mov	r18, r24
 e56:	30 e0       	ldi	r19, 0x00	; 0
 e58:	32 2f       	mov	r19, r18
 e5a:	22 27       	eor	r18, r18
 e5c:	33 0f       	add	r19, r19
 e5e:	33 0f       	add	r19, r19
 e60:	40 e0       	ldi	r20, 0x00	; 0
 e62:	50 e0       	ldi	r21, 0x00	; 0
 e64:	60 e0       	ldi	r22, 0x00	; 0
 e66:	74 e2       	ldi	r23, 0x24	; 36
 e68:	84 ef       	ldi	r24, 0xF4	; 244
 e6a:	90 e0       	ldi	r25, 0x00	; 0
 e6c:	0e 94 83 07 	call	0xf06	; 0xf06 <__divmodsi4>
 e70:	21 50       	subi	r18, 0x01	; 1
 e72:	31 09       	sbc	r19, r1
 e74:	37 bd       	out	0x27, r19	; 39
 e76:	26 bd       	out	0x26, r18	; 38
	OCR1A_16BIT_ACCESS = (((Duty_Cycle * (ICR1_16BIT_ACCESS+1))/100)-1);
 e78:	86 b5       	in	r24, 0x26	; 38
 e7a:	97 b5       	in	r25, 0x27	; 39
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	c8 9f       	mul	r28, r24
 e80:	90 01       	movw	r18, r0
 e82:	c9 9f       	mul	r28, r25
 e84:	30 0d       	add	r19, r0
 e86:	11 24       	eor	r1, r1
 e88:	36 95       	lsr	r19
 e8a:	27 95       	ror	r18
 e8c:	36 95       	lsr	r19
 e8e:	27 95       	ror	r18
 e90:	ab e7       	ldi	r26, 0x7B	; 123
 e92:	b4 e1       	ldi	r27, 0x14	; 20
 e94:	0e 94 a2 07 	call	0xf44	; 0xf44 <__umulhisi3>
 e98:	96 95       	lsr	r25
 e9a:	87 95       	ror	r24
 e9c:	01 97       	sbiw	r24, 0x01	; 1
 e9e:	9b bd       	out	0x2b, r25	; 43
 ea0:	8a bd       	out	0x2a, r24	; 42
	//PRESCALER
	TCCR1B |= 0X05;
 ea2:	8e b5       	in	r24, 0x2e	; 46
 ea4:	85 60       	ori	r24, 0x05	; 5
 ea6:	8e bd       	out	0x2e, r24	; 46
}
 ea8:	cf 91       	pop	r28
 eaa:	08 95       	ret

00000eac <UART_Init>:
	{
		REC_Status = 1;
		RX_STATUS_FLAG =0;
	}
	return REC_Status;
}
 eac:	80 b5       	in	r24, 0x20	; 32
 eae:	80 68       	ori	r24, 0x80	; 128
 eb0:	80 bd       	out	0x20, r24	; 32
 eb2:	80 b5       	in	r24, 0x20	; 32
 eb4:	8f 7b       	andi	r24, 0xBF	; 191
 eb6:	80 bd       	out	0x20, r24	; 32
 eb8:	80 b5       	in	r24, 0x20	; 32
 eba:	8e 7f       	andi	r24, 0xFE	; 254
 ebc:	80 bd       	out	0x20, r24	; 32
 ebe:	80 b5       	in	r24, 0x20	; 32
 ec0:	8f 7e       	andi	r24, 0xEF	; 239
 ec2:	80 bd       	out	0x20, r24	; 32
 ec4:	80 b5       	in	r24, 0x20	; 32
 ec6:	8f 7d       	andi	r24, 0xDF	; 223
 ec8:	80 bd       	out	0x20, r24	; 32
 eca:	80 b5       	in	r24, 0x20	; 32
 ecc:	86 68       	ori	r24, 0x86	; 134
 ece:	80 bd       	out	0x20, r24	; 32
 ed0:	52 98       	cbi	0x0a, 2	; 10
 ed2:	80 b5       	in	r24, 0x20	; 32
 ed4:	87 7f       	andi	r24, 0xF7	; 247
 ed6:	80 bd       	out	0x20, r24	; 32
 ed8:	57 9a       	sbi	0x0a, 7	; 10
 eda:	56 9a       	sbi	0x0a, 6	; 10
 edc:	53 9a       	sbi	0x0a, 3	; 10
 ede:	54 9a       	sbi	0x0a, 4	; 10
 ee0:	87 e6       	ldi	r24, 0x67	; 103
 ee2:	89 b9       	out	0x09, r24	; 9
 ee4:	08 95       	ret

00000ee6 <Rechived_Char>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Rechived_Char(void){
	RechivedChar=UDR;
 ee6:	8c b1       	in	r24, 0x0c	; 12
 ee8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <RechivedChar>
	Flag=1;
 eec:	81 e0       	ldi	r24, 0x01	; 1
 eee:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Flag>
 ef2:	08 95       	ret

00000ef4 <UART_RX_Char_Status>:
*******************************************************************************/
uint8 UART_RX_Char_Status(void)
{
	uint8 REC_Status =0;
	
	if (Flag == 1)
 ef4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Flag>
 ef8:	81 30       	cpi	r24, 0x01	; 1
 efa:	19 f4       	brne	.+6      	; 0xf02 <UART_RX_Char_Status+0xe>
	{
		REC_Status = 1;
		Flag =0;
 efc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <Flag>
 f00:	08 95       	ret
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8 UART_RX_Char_Status(void)
{
	uint8 REC_Status =0;
 f02:	80 e0       	ldi	r24, 0x00	; 0
	{
		REC_Status = 1;
		Flag =0;
	}
	return REC_Status;
}
 f04:	08 95       	ret

00000f06 <__divmodsi4>:
 f06:	05 2e       	mov	r0, r21
 f08:	97 fb       	bst	r25, 7
 f0a:	1e f4       	brtc	.+6      	; 0xf12 <__divmodsi4+0xc>
 f0c:	00 94       	com	r0
 f0e:	0e 94 9a 07 	call	0xf34	; 0xf34 <__negsi2>
 f12:	57 fd       	sbrc	r21, 7
 f14:	07 d0       	rcall	.+14     	; 0xf24 <__divmodsi4_neg2>
 f16:	0e 94 b1 07 	call	0xf62	; 0xf62 <__udivmodsi4>
 f1a:	07 fc       	sbrc	r0, 7
 f1c:	03 d0       	rcall	.+6      	; 0xf24 <__divmodsi4_neg2>
 f1e:	4e f4       	brtc	.+18     	; 0xf32 <__divmodsi4_exit>
 f20:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__negsi2>

00000f24 <__divmodsi4_neg2>:
 f24:	50 95       	com	r21
 f26:	40 95       	com	r20
 f28:	30 95       	com	r19
 f2a:	21 95       	neg	r18
 f2c:	3f 4f       	sbci	r19, 0xFF	; 255
 f2e:	4f 4f       	sbci	r20, 0xFF	; 255
 f30:	5f 4f       	sbci	r21, 0xFF	; 255

00000f32 <__divmodsi4_exit>:
 f32:	08 95       	ret

00000f34 <__negsi2>:
 f34:	90 95       	com	r25
 f36:	80 95       	com	r24
 f38:	70 95       	com	r23
 f3a:	61 95       	neg	r22
 f3c:	7f 4f       	sbci	r23, 0xFF	; 255
 f3e:	8f 4f       	sbci	r24, 0xFF	; 255
 f40:	9f 4f       	sbci	r25, 0xFF	; 255
 f42:	08 95       	ret

00000f44 <__umulhisi3>:
 f44:	a2 9f       	mul	r26, r18
 f46:	b0 01       	movw	r22, r0
 f48:	b3 9f       	mul	r27, r19
 f4a:	c0 01       	movw	r24, r0
 f4c:	a3 9f       	mul	r26, r19
 f4e:	70 0d       	add	r23, r0
 f50:	81 1d       	adc	r24, r1
 f52:	11 24       	eor	r1, r1
 f54:	91 1d       	adc	r25, r1
 f56:	b2 9f       	mul	r27, r18
 f58:	70 0d       	add	r23, r0
 f5a:	81 1d       	adc	r24, r1
 f5c:	11 24       	eor	r1, r1
 f5e:	91 1d       	adc	r25, r1
 f60:	08 95       	ret

00000f62 <__udivmodsi4>:
 f62:	a1 e2       	ldi	r26, 0x21	; 33
 f64:	1a 2e       	mov	r1, r26
 f66:	aa 1b       	sub	r26, r26
 f68:	bb 1b       	sub	r27, r27
 f6a:	fd 01       	movw	r30, r26
 f6c:	0d c0       	rjmp	.+26     	; 0xf88 <__udivmodsi4_ep>

00000f6e <__udivmodsi4_loop>:
 f6e:	aa 1f       	adc	r26, r26
 f70:	bb 1f       	adc	r27, r27
 f72:	ee 1f       	adc	r30, r30
 f74:	ff 1f       	adc	r31, r31
 f76:	a2 17       	cp	r26, r18
 f78:	b3 07       	cpc	r27, r19
 f7a:	e4 07       	cpc	r30, r20
 f7c:	f5 07       	cpc	r31, r21
 f7e:	20 f0       	brcs	.+8      	; 0xf88 <__udivmodsi4_ep>
 f80:	a2 1b       	sub	r26, r18
 f82:	b3 0b       	sbc	r27, r19
 f84:	e4 0b       	sbc	r30, r20
 f86:	f5 0b       	sbc	r31, r21

00000f88 <__udivmodsi4_ep>:
 f88:	66 1f       	adc	r22, r22
 f8a:	77 1f       	adc	r23, r23
 f8c:	88 1f       	adc	r24, r24
 f8e:	99 1f       	adc	r25, r25
 f90:	1a 94       	dec	r1
 f92:	69 f7       	brne	.-38     	; 0xf6e <__udivmodsi4_loop>
 f94:	60 95       	com	r22
 f96:	70 95       	com	r23
 f98:	80 95       	com	r24
 f9a:	90 95       	com	r25
 f9c:	9b 01       	movw	r18, r22
 f9e:	ac 01       	movw	r20, r24
 fa0:	bd 01       	movw	r22, r26
 fa2:	cf 01       	movw	r24, r30
 fa4:	08 95       	ret

00000fa6 <_exit>:
 fa6:	f8 94       	cli

00000fa8 <__stop_program>:
 fa8:	ff cf       	rjmp	.-2      	; 0xfa8 <__stop_program>
